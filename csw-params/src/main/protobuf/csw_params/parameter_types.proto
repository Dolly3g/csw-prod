syntax = "proto3";

package csw_params;

import "scalapb/scalapb.proto";
import "google/protobuf/descriptor.proto";

//ByteItems
//CharItems
//ShortItems
//ByteArrayItems
//ShortArrayItems
//ByteMatrixItems
//ShortMatrixItems

message AnyItems {
//    option (scalapb.message).extends = "csw.param.pb.ItemType[com.google.protobuf.ByteString, AnyItems]";
    repeated bytes values = 1;
}

message StringItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[String, StringItems]";
    repeated string values = 1;
}

message BooleanItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[Boolean, BooleanItems]";
    repeated bool values = 1;
}

message IntItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[Int, IntItems]";
    repeated int32 values = 1;
}

message LongItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[Long, LongItems]";
    repeated fixed64 values = 1;
}

message DoubleItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[Double, DoubleItems]";
    repeated double values = 1;
}

message FloatItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[Float, FloatItems]";
    repeated float values = 1;
}

message IntArrayItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[csw.param.models.ArrayData[Int], IntArrayItems]";
    repeated IntItems values = 1 [(scalapb.field).type = "csw.param.models.ArrayData[Int]"];
}

message LongArrayItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[csw.param.models.ArrayData[Long], LongArrayItems]";
    repeated LongItems values = 1 [(scalapb.field).type = "csw.param.models.ArrayData[Long]"];
}

message FloatArrayItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[csw.param.models.ArrayData[Float], FloatArrayItems]";
    repeated FloatItems values = 1 [(scalapb.field).type = "csw.param.models.ArrayData[Float]"];
}

message DoubleArrayItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[csw.param.models.ArrayData[Double], DoubleArrayItems]";
    repeated DoubleItems values = 1 [(scalapb.field).type = "csw.param.models.ArrayData[Double]"];
}

message IntMatrixItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[csw.param.models.MatrixData[Int], IntMatrixItems]";
    repeated IntArrayItems values = 1 [(scalapb.field).type = "csw.param.models.MatrixData[Int]"];
}

message LongMatrixItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[csw.param.models.MatrixData[Long], LongMatrixItems]";
    repeated LongArrayItems values = 1 [(scalapb.field).type = "csw.param.models.MatrixData[Long]"];
}

message FloatMatrixItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[csw.param.models.MatrixData[Float], FloatMatrixItems]";
    repeated FloatArrayItems values = 1 [(scalapb.field).type = "csw.param.models.MatrixData[Float]"];
}

message DoubleMatrixItems {
    option (scalapb.message).extends = "csw.param.pb.ItemType[csw.param.models.MatrixData[Double], DoubleMatrixItems]";
    repeated DoubleArrayItems values = 1 [(scalapb.field).type = "csw.param.models.MatrixData[Double]"];
}
